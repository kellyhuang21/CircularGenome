# -*- coding: utf-8 -*-
#BEGIN_HEADER
import os
import subprocess

from installed_clients.KBaseReportClient import KBaseReport
from installed_clients.GenomeFileUtilClient import GenomeFileUtil

#END_HEADER


class CGView:
    '''
    Module Name:
    CGView

    Module Description:
    A KBase module: CGView
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = "https://github.com/kellyhuang21/CircularGenome.git"
    GIT_COMMIT_HASH = "a5c49b44f15f584ef4ab215c4962baa90923e901"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        self.callback_url = os.environ['SDK_CALLBACK_URL']
        self.shared_folder = config['scratch']
        # logging.basicConfig(format='%(created)s %(levelname)s: %(message)s',
        #                     level=logging.INFO)
        #END_CONSTRUCTOR
        pass


    def run_CGView(self, ctx, params):
        """
        This example function accepts any number of parameters and returns results in a KBaseReport
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "ReportResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: output
        #BEGIN run_CGView
        print('Starting run_kellyhuangCGView function. Params=')
        print(params)
        # Validating workspace_name and input_file is present
        print('Validating parameters.')
        if 'workspace_name' not in params:
            raise ValueError('Parameter workspace_name is not set in input arguments')
        workspace_name = params['workspace_name']
        if 'input_file' not in params:
            raise ValueError('Parameter input_file is not set in input arguments')

        input_file = params['input_file']
        project_dir = os.path.join(self.shared_folder, 'project')

        # Set up CCT project_folder
        proj_output = subprocess.check_output(["ls", "/opt"])
        print("=====/opt path=====", proj_output)
        subprocess.call("cd /opt/cgview_comparison_tool && ./update_cogs.sh && cgview_comparison_tool.pl -p project", shell=True)

        # Turn genome object to Genbank file
        gfu = GenomeFileUtil(self.callback_url)
        gbk = gfu.genome_to_genbank({'genome_ref':input_file})
        os.path.join("/opt/cgview_comparison_tool/project/reference_genome", gbk)

        # Add Genbank file to project_folder/reference_genome
        subprocess.call("cd /opt/cgview_comparison_tool/project", shell=True)
        proj_output = subprocess.check_output(["ls", "/opt/cgview_comparison_tool/project/reference_genome"])
        print("===== /opt/cgview_comparison_tool/project/reference_genome =====", proj_output)

        # Generate map from Genbank file
        subprocess.call("cd /opt/cgview_comparison_tool && cgview_comparison_tool.pl -p project", shell=True)
        proj_output = subprocess.check_output(["ls", "/opt/cgview_comparison_tool/project/maps"])
        print("===== /opt/cgview_comparison_tool/project/maps =====", proj_output)

    # Retrieve map PNG from project_folder/maps


        subprocess.check_output(["cd", "/opt/cgview_comparison_tool"], shell=True)
        proj_output = subprocess.check_output(["pwd"], shell=True)
        print("=====cd /opt/cgview_comparison_tool=====", proj_output)

    # subprocess.call("/opt/cgview_comparison_tool/./update_cogs.sh" , shell=True)
        # subprocess.call("cd /opt/cgview_comparison_tool", shell=True)
        # proj_output = subprocess.check_output(["ls", "/opt/cgview_comparison_tool"])
        # print(proj_output)

        # call CGView
        # p = subprocess.Popen(call_, cwd = self.scratch, \
        #                      stdout = subprocess.PIPE, \
        #                      stderr = subprocess, \
        #                      shell = False)
        # Download input data as Fasta
        print('Downloading Assembly data as a Fasta file.')
        # genomeUtil = GenomeFileUtil(self.callback_url)
        # genome = genomeUtil.genome_to_genbank({'genome_ref': input_file})

        # Save assembly back to system
        print('Uploading filtered Assembly data.')

        # new_assembly = assemblyUtil.save_assembly_from_fasta({'file': {'path': filtered_fasta_file},
        #                                                   'workspace_name': workspace_name,
        #                                                   'assembly_name': genome['assembly_name']
        #                                                   })
        report = KBaseReport(self.callback_url)
        report_info = report.create({'report': {'objects_created':[],
                                                'text_message': params['input_file']},
                                                'workspace_name': params['workspace_name']})
        output = {
            'report_name': report_info['name'],
            'report_ref': report_info['ref'],
        }
        #END run_CGView

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method run_CGView return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
